// Copyright (c) 2025 Matheus Degiovani. All rights reserved.
// Use of this source code is governed by a source-available
// license that can be found in the LICENSE file.

package mdcapnp

import "time"

type SmallTestStruct Struct

func (st *SmallTestStruct) Siblings() int64 {
	return (*Struct)(st).Int64(0)
}

func (st *SmallTestStruct) ReadNameField(ls *List) error {
	return (*Struct)(st).ReadList(0, ls) // First pointer.
}

// GoserbenchAStruct is a handwritten (i.e. not generated by the capnp compiler)
// implementation of goserbench's A benchmark structure.
type GoserbenchAStruct Struct

func (st *GoserbenchAStruct) ReadFromRoot(msg *Message) error {
	return msg.ReadRoot((*Struct)(st))
}

func (st *GoserbenchAStruct) ReadNameField(ls *List) error {
	return (*Struct)(st).ReadList(0, ls) // First pointer.
}

func (st *GoserbenchAStruct) Name() string {
	var ls List
	if err := (*Struct)(st).ReadList(0, &ls); err != nil {
		return ""
	}
	return ls.String()
}

func (st *GoserbenchAStruct) UnsafeName() string {
	var ls List
	if err := (*Struct)(st).ReadList(0, &ls); err != nil {
		return ""
	}
	return ls.UnsafeString()
}

func (st *GoserbenchAStruct) BirthDay() int64 {
	return (*Struct)(st).Int64(0)
}

func (st *GoserbenchAStruct) Phone() string {
	var ls List
	if err := (*Struct)(st).ReadList(1, &ls); err != nil {
		return ""
	}
	return ls.String()
}

func (st *GoserbenchAStruct) UnsafePhone() string {
	var ls List
	if err := (*Struct)(st).ReadList(1, &ls); err != nil {
		return ""
	}
	return ls.UnsafeString()
}

func (st *GoserbenchAStruct) Siblings() int32 {
	return (*Struct)(st).Int32(1, Int32FieldLo)
}

func (st *GoserbenchAStruct) Spouse() bool {
	return (*Struct)(st).Bool(1, 32)
}

func (st *GoserbenchAStruct) Money() float64 {
	return (*Struct)(st).Float64(2)
}

// goserbenchA is a copy of goserbench's A benchmark structure.
type goserbenchA struct {
	Name     string
	BirthDay time.Time
	Phone    string
	Siblings int
	Spouse   bool
	Money    float64
}
