// Copyright (c) 2025 Matheus Degiovani. All rights reserved.
// Use of this source code is governed by a source-available
// license that can be found in the LICENSE file.

package capnpser

import (
	"errors"
	"math"
	"time"
)

// SmallTestStruct is a handwritten small test structure.
type SmallTestStruct Struct

func (st *SmallTestStruct) Siblings() int64 {
	return (*Struct)(st).Int64(0)
}

func (st *SmallTestStruct) ReadNameField(ls *List) error {
	return (*Struct)(st).ReadList(0, ls) // First pointer.
}

// GoserbenchSmallStruct is a handwritten (i.e. not generated by the capnp
// compiler) implementation of goserbench's SmallStruct benchmark structure.
type GoserbenchSmallStruct Struct

func (st *GoserbenchSmallStruct) ReadFromRoot(msg *Message) error {
	return msg.ReadRoot((*Struct)(st))
}

func (st *GoserbenchSmallStruct) ReadNameField(ls *List) error {
	return (*Struct)(st).ReadList(0, ls) // First pointer.
}

func (st *GoserbenchSmallStruct) Name() string {
	return (*Struct)(st).String(0)
}

func (st *GoserbenchSmallStruct) UnsafeName() string {
	return (*Struct)(st).UnsafeString(0)
}

func (st *GoserbenchSmallStruct) BirthDay() int64 {
	return (*Struct)(st).Int64(0)
}

func (st *GoserbenchSmallStruct) Phone() string {
	return (*Struct)(st).String(1)
}

func (st *GoserbenchSmallStruct) UnsafePhone() string {
	return (*Struct)(st).UnsafeString(1)
}

func (st *GoserbenchSmallStruct) Siblings() int32 {
	return (*Struct)(st).Int32(1, Int32FieldLo)
}

func (st *GoserbenchSmallStruct) Spouse() bool {
	return (*Struct)(st).Bool(1, 32)
}

func (st *GoserbenchSmallStruct) Money() float64 {
	return (*Struct)(st).Float64(2)
}

type GoserbenchSmallStructBuilder StructBuilder

func NewGoserbenchSmallStruct(mb *MessageBuilder) (GoserbenchSmallStructBuilder, error) {
	r, err := mb.NewStruct(StructSize{DataSectionSize: 3, PointerSectionSize: 2})
	return GoserbenchSmallStructBuilder(r), err
}

func (stb *GoserbenchSmallStructBuilder) SetAsRoot(mb *MessageBuilder) error {
	return mb.SetRoot((*StructBuilder)(stb))
}

func (stb *GoserbenchSmallStructBuilder) SetBirthDay(v int64) {
	(*StructBuilder)(stb).SetInt64(0, v)
}

func (stb *GoserbenchSmallStructBuilder) SetSiblings(v int32) {
	(*StructBuilder)(stb).SetInt32(1, Uint32FieldLo, v)
}

func (stb *GoserbenchSmallStructBuilder) SetSpouse(v bool) {
	(*StructBuilder)(stb).SetBool(1, 32, v)
}

func (stb *GoserbenchSmallStructBuilder) SetMoney(v float64) {
	(*StructBuilder)(stb).SetFloat64(2, v)
}

func (stb *GoserbenchSmallStructBuilder) SetName(v string) error {
	return (*StructBuilder)(stb).SetString(0, v)
}

func (stb *GoserbenchSmallStructBuilder) SetPhone(v string) error {
	return (*StructBuilder)(stb).SetString(1, v)
}

type GoserbenchSmallStructType = struct {
	Name     string
	BirthDay int64
	Phone    string
	Siblings int32
	Spouse   bool
	Money    float64
}

func GoserbenchSmallStructTypeSize(a *GoserbenchSmallStructType) (wc WordCount, valid bool) {
	// TODO: optionally cannonicalize by determining which data fields and
	// pointers are empty?
	stSize := StructSize{DataSectionSize: 3, PointerSectionSize: 2}

	wc, valid = stSize.TotalSize(), true
	wc, valid = wc.AddByteCount(ByteCount(len(a.Name)+1), valid)
	wc, valid = wc.AddByteCount(ByteCount(len(a.Phone)+1), valid)
	valid = valid &&
		len(a.Name) < MaxListSize &&
		len(a.Phone) < MaxListSize
	return
}

func UnsafeWriteGoserbenchSmallStructType(a *GoserbenchSmallStructType, parent UnsafeRawBuilder, ptrOff, startOff WordOffset) (endOff WordOffset) {
	// Get an aliased writer to the desired location.
	var urb UnsafeRawBuilder
	parent.AliasChild(startOff, &urb)

	// Write the data fields.
	urb.SetWord(0, Word(a.BirthDay))
	urb.SetWord(1, Word(a.Siblings)|BoolToWord(a.Spouse)<<32)
	urb.SetWord(2, Word(math.Float64bits(a.Money)))

	// Write the variable fields, keeping track of the end of this object.
	endOff = WordOffset(StructSize{DataSectionSize: 3, PointerSectionSize: 2}.TotalSize())
	endOff = urb.SetString(3, a.Name, endOff)
	endOff = urb.SetString(4, a.Phone, endOff)

	parent.SetStruct(ptrOff, startOff, StructSize{DataSectionSize: 3, PointerSectionSize: 2})
	endOff += startOff
	return
}

func UnsafeWriteRootGoserbenchSmallStructType(a *GoserbenchSmallStructType, mb *MessageBuilder) error {
	fullWC, valid := GoserbenchSmallStructTypeSize(a)
	if !valid {
		return errors.New("invalid size")
	}

	rootRB, err := mb.AllocateRootRawBuilder(fullWC)
	if err != nil {
		return err
	}
	WriteGoserbenchSmallStructType(a, rootRB, 0, 1)

	return nil
}

func WriteGoserbenchSmallStructType(a *GoserbenchSmallStructType, parent RawBuilder, ptrOff, startOff WordOffset) (endOff WordOffset) {
	// Get an aliased writer to the desired location.
	var rb RawBuilder
	parent.AliasChild(startOff, &rb)

	// Write the data fields.
	rb.SetWord(0, Word(a.BirthDay))
	rb.SetWord(1, Word(a.Siblings)|BoolToWord(a.Spouse)<<32)
	rb.SetWord(2, Word(math.Float64bits(a.Money)))

	// Write the variable fields, keeping track of the end of this object.
	endOff = WordOffset(StructSize{DataSectionSize: 3, PointerSectionSize: 2}.TotalSize())
	endOff = rb.SetString(3, a.Name, endOff)
	endOff = rb.SetString(4, a.Phone, endOff)

	parent.SetStruct(ptrOff, startOff, StructSize{DataSectionSize: 3, PointerSectionSize: 2})
	endOff += startOff
	return
}

func WriteRootGoserbenchSmallStructType(a *GoserbenchSmallStructType, mb *MessageBuilder) error {
	fullWC, valid := GoserbenchSmallStructTypeSize(a)
	if !valid {
		return errors.New("invalid size")
	}

	rootRB, err := mb.AllocateRootRawBuilder(fullWC)
	if err != nil {
		return err
	}
	WriteGoserbenchSmallStructType(a, rootRB, 0, 1)

	return nil
}

//***********************************************************

func GoserbenchSmallStructTypeSizeXXX(a *GoserbenchSmallStructType) (wc WordCount, valid bool) {
	// TODO: optionally cannonicalize by determining which data fields and
	// pointers are empty?
	stSize := StructSize{DataSectionSize: 3 + 3 + 2}

	wc, valid = stSize.TotalSize(), true
	return
}

func WriteGoserbenchSmallStructTypeXXX(a *GoserbenchSmallStructType, parent RawBuilder, ptrOff, startOff WordOffset) (endOff WordOffset) {
	// Get an aliased writer to the desired location.
	var rb RawBuilder
	parent.AliasChild(startOff, &rb)

	// Write the data fields.
	rb.SetWord(0, Word(a.BirthDay))
	rb.SetWord(1, Word(a.Siblings)|BoolToWord(a.Spouse)<<32)
	rb.SetWord(2, Word(math.Float64bits(a.Money)))
	rb.SetStringXXX(3, 3, a.Name)
	rb.SetStringXXX(6, 2, a.Phone)

	parent.SetStruct(ptrOff, startOff, StructSize{DataSectionSize: 3 + 3 + 2})
	endOff += startOff
	return
}

func WriteRootGoserbenchSmallStructTypeXXX(a *GoserbenchSmallStructType, mb *MessageBuilder) error {
	fullWC, valid := GoserbenchSmallStructTypeSizeXXX(a)
	if !valid {
		return errors.New("invalid size")
	}

	rootRB, err := mb.AllocateRootRawBuilder(fullWC)
	if err != nil {
		return err
	}
	WriteGoserbenchSmallStructTypeXXX(a, rootRB, 0, 1)

	return nil
}

// goserbenchSmallStruct is a copy of goserbench's SmallStruct benchmark
// structure.
type goserbenchSmallStruct struct {
	Name     string
	BirthDay time.Time
	Phone    string
	Siblings int
	Spouse   bool
	Money    float64
}
